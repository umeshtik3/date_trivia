// Mocks generated by Mockito 5.1.0 from annotations
// in date_trivia/test/features/date_trivia/presentation/bloc/date_trivia_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i5;
import 'package:date_trivia/core/error/failures.dart' as _i6;
import 'package:date_trivia/core/usecase/usecase.dart' as _i9;
import 'package:date_trivia/core/utils/input_converter.dart' as _i10;
import 'package:date_trivia/features/date_trivia/domain/entities/date_trivia.dart'
    as _i7;
import 'package:date_trivia/features/date_trivia/domain/repositories/date_trivia_repository.dart'
    as _i2;
import 'package:date_trivia/features/date_trivia/domain/usecases/get_concrete_date_trivia.dart'
    as _i3;
import 'package:date_trivia/features/date_trivia/domain/usecases/get_random_date_trivia.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDateTriviaRepository_0 extends _i1.Fake
    implements _i2.DateTriviaRepository {}

/// A class which mocks [GetConcreteDateTrivia].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetConcreteDateTrivia extends _i1.Mock
    implements _i3.GetConcreteDateTrivia {
  MockGetConcreteDateTrivia() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DateTriviaRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeDateTriviaRepository_0()) as _i2.DateTriviaRepository);
  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);
  @override
  _i4.Future<_i5.Either<_i6.Failure, _i7.DateTrivia>?> call(
          _i3.Params? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i5.Either<_i6.Failure, _i7.DateTrivia>?>.value())
          as _i4.Future<_i5.Either<_i6.Failure, _i7.DateTrivia>?>);
}

/// A class which mocks [GetRandomDateTrivia].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomDateTrivia extends _i1.Mock
    implements _i8.GetRandomDateTrivia {
  MockGetRandomDateTrivia() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DateTriviaRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeDateTriviaRepository_0()) as _i2.DateTriviaRepository);
  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);
  @override
  _i4.Future<_i5.Either<_i6.Failure, _i7.DateTrivia>?> call(
          _i9.NoParams? noParams) =>
      (super.noSuchMethod(Invocation.method(#call, [noParams]),
              returnValue:
                  Future<_i5.Either<_i6.Failure, _i7.DateTrivia>?>.value())
          as _i4.Future<_i5.Either<_i6.Failure, _i7.DateTrivia>?>);
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i10.InputConverter {
  MockInputConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Either<_i6.Failure, String>? validateInputDateString(String? inputDate) =>
      (super.noSuchMethod(
              Invocation.method(#validateInputDateString, [inputDate]))
          as _i5.Either<_i6.Failure, String>?);
}
